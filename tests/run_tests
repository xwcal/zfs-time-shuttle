#!/bin/bash

. random_choice.sh
. grub_ia.sh
. grub_sim.sh
. user_ia.sh

##############################
# adjustable params:

# Note that BOOTMODE is updated by grub_sim called by grub_ia

. params.sh

# taken out of grub_sim.sh
BASE="$POOL/$BASE_FS"

##############################
# from zfs_custom_boot:
ZPROP_SD=local:system-data

RBC=.zfsrb # regular branch container
CBC=.zfscb # control branch container
RSBC=.zfsrsb # regular session branch container
CSBC=.zfscsb # control session branch container

ZFS_GET="zfs get -Hpovalue"
ZFS_MOUNT="mount -t zfs"
ZFS_UNMOUNT='umount'

parse_sd() {
    # IN:
    # $sd
    # IN/OUT:
    # $psbm
    # $psts
    # $rbp
    # $rsp
    # $cbp
    # $csp
    # $ncbp
    # $ncsp
    local tail
    psbm="${sd%%:*}"
    tail="${sd#*:}"
    psts="${tail%%:*}"
    tail="${tail#*:}"
    rbp="${tail%%:*}"
    tail="${tail#*:}"
    rsp="${tail%%:*}"
    tail="${tail#*:}"
    cbp="${tail%%:*}"
    tail="${tail#*:}"
    csp="${tail%%:*}"
    tail="${tail#*:}"
    ncbp="${tail%%:*}"
    tail="${tail#*:}"
    ncsp="${tail%%:*}"
}

zfs_exist() {
    # $1: fs path
    zfs list "$1" >/dev/null 2>&1
}

##############################
# state trackers:
BOOTFS_CHANGED=n # in ca, not affected by reverts to the regular side
REVERTED=n
PS_SD=
PS_SD_RVTD= # no necessarily current when REVERTED!=y

# log the admin sessions that are cut short by reboot (so that later reads don't check them): 
declare -A RASS # regular admin short sessions
declare -A CASS # control admin short sessions



##############################
# utility:
log_event() {
    echo "EVENT: $1"
}

log_success() {
    echo "SUCCESS: $1"
}

log_error() {
    echo "ERROR: $1"
}

bail() {
    echo "TESTER ERROR: $1"
    exit 1
}

checksum() {
    is_id "$1" || return 1 # is_id is defined in random_choice.sh
    set "$1" "$2" "$(sha1sum "$2")"
    if [ -z "$3" ]; then return 1; fi
    eval "$1=${3%% *}"
}

run_session() {
    local retval
    echo "#############################"
    echo "session: $1 starting at $(date --rfc-3339=seconds)"
    # boot system, mount file systems
    grub_ia
    retval=$?
    if [ $retval != 0 ]; then
        log_event "grub_ia returned $retval"
        zpool export "$POOL" 2>/dev/null
        return 0
    fi
    user_ia
    zpool export "$POOL"
}

correct_pool() {
    local cmt
    zpool import "$POOL" -d /dev/shm/ -R "$ROOT" || return 1
    cmt="$(zpool get -H -o value comment "$POOL")"
    zpool export "$POOL" || return 1
    [ "$cmt" = temporary ]
}

dir_empty() {
    local cnts
    cnts="$(ls -A "$1")"
    [ -z "$cnts" ]
}

##############################
# misc:
BOOTMODES=(rn ra cn ca)
BCS=("$RBC" "$CBC")



##############################
# start running

# checking adjustable params:

date --date="@$NOWTS" || bail "Cannot parse NOWTS: $NOWTS"

# better let user create an empty dir manually:
[ -d "$ROOT" ] || bail "'$ROOT' does not exist."
dir_empty "$ROOT" || bail "'$ROOT' is not empty"

# make sure we are running on the correct pool:
correct_pool || bail "'$POOL' is not the correct pool."

# preparation:
# (1) copy file:
if ! [ -f "$BIG_FILE" ]; then
    cp "$BIG_FILE_SOURCE" "$BIG_FILE" || bail "Cannot get $BIG_FILE"
fi
checksum BIG_FILE_HASH "$BIG_FILE" || bail "Cannot checksum $BIG_FILE"

# (2) build pool:
grub_sim builder $NOWTS n
if ! [ -d "$REVERT_SCRIPT_DEST" ]; then
    mkdir "$REVERT_SCRIPT_DEST" || bail "Cannot mkdir $REVERT_SCRIPT_DEST"
    cp -r "$REVERT_SCRIPT_SOURCE" "$REVERT_SCRIPT_DEST" ||
        bail "Cannot cp -r $REVERT_SCRIPT_SOURCE $REVERT_SCRIPT_DEST"
    # make sure BASE is used by the revert scripts
    echo "BASE=$BASE" >> "$REVERT_SCRIPT_DEST/sh/defs.sh" ||
        bail "Cannot write $REVERT_SCRIPT_DEST/sh/defs.sh"
fi
zpool export "$POOL"

# baby steps:

# NOWTS=$((NOWTS+10))
# grub_sim rn $NOWTS n
# zpool export "$POOL"

# NOWTS=$((NOWTS+10))
# grub_sim ra $NOWTS n
# zpool export "$POOL"

# NOWTS=$((NOWTS+10))
# grub_sim cn $NOWTS n
# zpool export "$POOL"

# NOWTS=$((NOWTS+10))
# grub_sim ca $NOWTS n
# zpool export "$POOL"


declare -i n
for ((n=1; n<=SESSION_COUNT; n++)); do
    run_session $n
done
